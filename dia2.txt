# wdev - github

**Cheatsheet**

Esta es una lista de referencia con los comandos de Git m치s usados. **(Podr칤as considerar marcar esta p치gina como favorita).** Trat치 de familiarizarte con los comandos para que eventualmente puedas recordarlos todos:

**Comandos relacionados con un repositorio remoto:**

`git clone git@github.com:USER-NAME/REPOSITORY-NAME.git`

`git push` o `git push origin main` (ambos logran el mismo objetivo en este contexto)

**Comandos relacionados con el flujo de trabajo:**

`git add .`

`git commit -m "A message describing what you have done to make this snapshot different"`

**Comandos relacionados con revisar estado o historial de registros:**

`git status`

`git log`

La sintaxis b치sica de Git es **programa | acci칩n | destino**.

Por ejemplo:

- `git add .` se lee como **git | add | .**, donde el punto representa todo en el directorio actual;
- `git commit -m "message"` se lee como **git | commit -m | "message"**; y
- `git status` se lee como **git | status | (sin destino)**.

---

### 游늷 Buenas pr치cticas en Git

Hay mucho que aprender sobre el uso de Git, pero vale la pena destacar algunas buenas pr치cticas para que seas un mejor colaborador. Git no solo es 칰til al trabajar con otros, tambi칠n lo es cuando trabaj치s de manera independiente. En el futuro depender치s cada vez m치s de tu propio historial de commits cuando revisites c칩digo antiguo.

Dos buenas pr치cticas 칰tiles a considerar son los **commits at칩micos** y aprovechar esos commits at칩micos para que tus mensajes de commit sean m치s 칰tiles para futuros colaboradores.

Un **commit at칩mico** es un commit que incluye cambios relacionados 칰nicamente con una caracter칤stica o tarea de tu programa. Hay dos razones principales para hacerlo:

1. Si algo que cambiaste resulta problem치tico, es f치cil revertir ese cambio espec칤fico sin perder los dem치s.
2. Te permite escribir mejores mensajes de commit.

춰Vas a aprender m치s sobre c칩mo deber칤a lucir un buen mensaje de commit en una lecci칩n futura!

---

### 游늷 Cambiando el editor de mensajes de commit en Git

Si est치s usando Visual Studio Code (y deber칤as hacerlo si segu칤s este curso), hay una forma de asegurarte de que si us치s `git commit` sin el flag del mensaje (`-m`), no quedes atascado escribiendo tu mensaje en **Vim**.

Cambiar el editor de mensajes por defecto es una buena idea en caso de que olvides el flag, a menos que prefieras usar Vim. No tiene ninguna desventaja cambiarlo, porque siempre vas a poder elegir si escrib칤s el mensaje en la terminal o en la comodidad de VS Code.

El siguiente comando configura eso. Escribilo (o copialo y pegalo) en tu terminal y presion치 **Enter**:

`git config --global core.editor "code --wait"`

No habr치 confirmaci칩n ni salida en la terminal despu칠s de ingresar este comando.

Con eso hecho, ahora pod칠s elegir usar:

- `git commit -m "your message here"`
- o simplemente `git commit` para escribir tu mensaje en **Visual Studio Code**.

Para hacer un commit usando **Visual Studio Code** como editor de texto, simplemente tipe치 `git commit`. Despu칠s de presionar **Enter**, se abrir치 una nueva pesta침a en VS Code para que escribas tu mensaje. Pod칠s dar m치s detalles en varias l칤neas como parte de tu mensaje de commit.

Despu칠s de escribirlo, guard치 con **Ctrl + S** (Mac: **Cmd + S**) y cerr치 la pesta침a. Cuando vuelvas a la l칤nea de comandos, vas a ver tu mensaje de commit y un resumen de los cambios.
